import React, { useEffect, useState, useRef } from "react";
import axios from "axios";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import "./friend.css";
import { FaSearch } from "react-icons/fa";
import "./OnlineStatus.css";
import { IoMdPersonAdd } from "react-icons/io";
import RequireLogin from "../ui/RequireLogin";
import { BsThreeDots } from "react-icons/bs";
import { useTheme } from "../../context/themecontext";
import { useParams } from "react-router-dom";
import { useSocket } from "../../context/socketcontext";

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ socket ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
// socket.on("connect", () => {

//   console.log("Socket connected to URL:", import.meta.env.VITE_APP_API_BASE_URL);

// ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á socket ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡πà socketcontext.jsx ‡πÅ‡∏•‡πâ‡∏ß

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á last seen
const formatLastSeen = (timestamp) => {
  if (!timestamp) return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";

  const now = new Date();
  const lastSeen = new Date(timestamp);
  const diffInMinutes = Math.floor((now - lastSeen) / (1000 * 60));

  if (diffInMinutes < 1) return "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà";
  if (diffInMinutes < 60) return `${diffInMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;

  const diffInHours = Math.floor(diffInMinutes / 60);
  if (diffInHours < 24) return `${diffInHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;

  return lastSeen.toLocaleDateString();
};

const Friend = () => {
  const { socket, onlineUsers } = useSocket(); // ‡πÉ‡∏ä‡πâ socket ‡πÅ‡∏•‡∏∞ onlineUsers ‡∏à‡∏≤‡∏Å context

  // ‡∏£‡∏±‡∏ö roomId ‡∏à‡∏≤‡∏Å URL ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÄ‡∏ä‡πà‡∏ô /friend/:roomId
  const { roomId } = useParams();

  // ‡∏¢‡πâ‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô useEffect
  const userEmail = localStorage.getItem("userEmail");
  const displayName = localStorage.getItem("userName");
  const photoURL = localStorage.getItem("userPhoto");

  const [users, setUsers] = useState([]);
  const [currentUser, setCurrentUser] = useState([]);
  const [currentUserfollow, setCurrentUserfollow] = useState(null);
  const [friends, setFriends] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedUser, setSelectedUser] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [loadingFriendEmail, setLoadingFriendEmail] = useState(null);
  const [loadingCurrentUser, setLoadingCurrentUser] = useState(true);
  const [loading, setLoading] = useState(false); // loading ‡∏£‡∏ß‡∏°
  const modalRef = useRef(null);
  const [openMenuFor, setOpenMenuFor] = useState(null);
  const [followers, setFollowers] = useState([]);
  const [following, setFollowing] = useState([]);
  const [getnickName, getNickName] = useState("");
  const dropdownRefs = useRef({});
  const { isDarkMode } = useTheme();
  const [error, setError] = useState("");
  const [notifications, setNotifications] = useState([]);
  const [newFriendRequest, setNewFriendRequest] = useState(null);
  const [showNotificationDropdown, setShowNotificationDropdown] =
    useState(false);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  useEffect(() => {
    if (userEmail) {
      const savedNotifications = localStorage.getItem(
        `notifications_${userEmail}`
      );
      if (savedNotifications) {
        try {
          const parsedNotifications = JSON.parse(savedNotifications);
          console.log("‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å localStorage:", parsedNotifications);
          setNotifications(parsedNotifications);
        } catch (error) {
          console.error(
            "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å localStorage:",
            error
          );
        }
      }
    }
  }, [userEmail]);

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÉ‡∏ô localStorage ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  useEffect(() => {
    if (userEmail && notifications.length > 0) {
      localStorage.setItem(
        `notifications_${userEmail}`,
        JSON.stringify(notifications)
      );
      console.log("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÉ‡∏ô localStorage:", notifications);
    }
  }, [notifications, userEmail]);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  useEffect(() => {
    if (userEmail && notifications.length > 0) {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
      const unreadFriendRequest = notifications.find(
        (n) => n.type === "friend-request" && !n.read
      );

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô newFriendRequest
      if (unreadFriendRequest && !newFriendRequest) {
        setNewFriendRequest({
          ...unreadFriendRequest,
          id: unreadFriendRequest.id,
        });
        console.log("‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô:", unreadFriendRequest);
      }
    }
  }, [notifications, newFriendRequest, userEmail]);

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  // useEffect(() => {
  //   if (userEmail) {
  //     // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  //     const testNotification = {
  //       id: Date.now(),
  //       type: "friend-request",
  //       from: {
  //         email: "test@example.com",
  //         displayName: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
  //         photoURL: "https://via.placeholder.com/40"
  //       },
  //       timestamp: new Date().toISOString(),
  //       read: false
  //     };

  //     // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  //     const timer = setTimeout(() => {
  //       console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö:", testNotification);
  //       setNotifications(prev => [testNotification, ...prev]);

  //       // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á newFriendRequest
  //       setNewFriendRequest({
  //         ...testNotification,
  //         id: testNotification.id
  //       });
  //     }, 3000);

  //     return () => clearTimeout(timer);
  //   }
  // }, [userEmail]);

  useEffect(() => {
    fetchGmailUser();
  }, []);

  const fetchCurrentUserAndFriends = async () => {
    setLoading(true);
    setError("");
    try {
      const encodedEmail = encodeURIComponent(userEmail);
      const userRes = await axios.get(
        `${import.meta.env.VITE_APP_API_BASE_URL}/api/users/${encodedEmail}`
      );
      const currentUser = userRes.data;
      const allUsersRes = await axios.get(
        `${import.meta.env.VITE_APP_API_BASE_URL}/api/users`
      );
      const allUsers = allUsersRes.data;
      setUsers(allUsers);
      if (Array.isArray(currentUser.friends)) {
        // ‡∏î‡∏∂‡∏á email ‡∏à‡∏≤‡∏Å friends array (object)
        const friendEmails = currentUser.friends.map((f) => f.email);
        const filteredFriends = allUsers
          .filter((user) => friendEmails.includes(user.email))
          .map((user) => ({
            photoURL: user.photoURL,
            email: user.email,
            displayName: user.displayName,
            isOnline: user.isOnline || false,
          }))
          .sort((a, b) => a.displayName.localeCompare(b.displayName));
        setFriends(filteredFriends);
      } else {
        setFriends([]);
      }
    } catch (error) {
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô");
      toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô");
    }
    setLoading(false);
  };

  useEffect(() => {
    if (!userEmail) return;
    fetchCurrentUserAndFriends();

    // ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    socket.emit("user-online", {
      displayName,
      photoURL,
      email: userEmail,
    });

    // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á socket ‡∏ó‡∏∏‡∏Å‡πÜ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const socketCheckInterval = setInterval(() => {
      if (!socket.connected) {
        console.warn("‚ö†Ô∏è Socket ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà...");
        socket.connect();
      } else {
        console.log("‚úì Socket ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà:", socket.id);
      }
    }, 10000);

    // ‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
    socket.on("notify-friend-request", async () => {
      console.log("üì© ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà");

      try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ú‡πà‡∏≤‡∏ô REST API
        const response = await axios.get(
          `${
            import.meta.env.VITE_APP_API_BASE_URL
          }/api/friend-requests/${userEmail}`
        );

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
        if (
          !response.data ||
          !response.data.requests ||
          response.data.requests.length === 0
        ) {
          console.log("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å API");
          return;
        }

        // ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        const latestRequest = response.data.requests[0];
        console.log("‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å API:", latestRequest);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠ (‡πÉ‡∏ä‡πâ ID ‡∏à‡∏≤‡∏Å API ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
        const requestId = latestRequest.requestId || Date.now();

        // ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ID
        setNewFriendRequest({
          from: latestRequest.from,
          to: latestRequest.to,
          timestamp: latestRequest.timestamp,
          id: requestId,
        });

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô state
        setNotifications((prevNotifications) => {
          const newNotification = {
            id: requestId,
            type: "friend-request",
            from: latestRequest.from,
            timestamp: latestRequest.timestamp,
            read: false,
          };

          // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
          const filteredNotifications = prevNotifications.filter(
            (n) =>
              n.type !== "friend-request" ||
              (n.type === "friend-request" &&
                n.from.email !== latestRequest.from.email)
          );

          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
          return [newNotification, ...filteredNotifications];
        });

        console.log(
          "üíæ ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô localStorage ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ú‡πà‡∏≤‡∏ô useEffect"
        );

        // ‡πÅ‡∏™‡∏î‡∏á toast notification
        toast.info(
          <div className="friend-request-toast">
            <img
              src={latestRequest.from.photoURL}
              alt={latestRequest.from.displayName}
              className="toast-profile-img"
            />
            <div className="toast-content">
              <strong>{latestRequest.from.displayName}</strong>{" "}
              ‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì
            </div>
          </div>,
          {
            autoClose: 8000,
            position: "bottom-right",
          }
        );
      } catch (error) {
        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô:", error);
      }
    });

    // ‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
    socket.on("notify-friend-accept", async () => {
      try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        await fetchCurrentUserAndFriends();

        // ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏≤
        const response = await axios.get(
          `${
            import.meta.env.VITE_APP_API_BASE_URL
          }/api/friend-accepts/${userEmail}`
        );

        if (response.data && response.data.latestAccept) {
          const acceptInfo = response.data.latestAccept;

          // ‡πÅ‡∏™‡∏î‡∏á toast notification
          toast.success(
            <div className="friend-request-toast">
              <img
                src={acceptInfo.photoURL}
                alt={acceptInfo.displayName}
                className="toast-profile-img"
              />
              <div className="toast-content">
                <strong>{acceptInfo.displayName}</strong>{" "}
                ‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß
              </div>
            </div>,
            {
              autoClose: 5000,
              position: "bottom-right",
            }
          );
        }
      } catch (error) {
        console.error(
          "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô:",
          error
        );
      }
    });

    // ‡∏ü‡∏±‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ WebSocket ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö real-time)
    socket.on("update-users", (data) => {
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ data ‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠ object

      // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô array ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
      if (Array.isArray(data)) {
        setUsers((prevUsers) =>
          prevUsers.map((user) => ({
            ...user,
            isOnline: data.some(
              (onlineUser) => onlineUser.email === user.email
            ),
            lastSeen:
              data.find((onlineUser) => onlineUser.email === user.email)
                ?.lastSeen || user.lastSeen,
          }))
        );
        setFriends((prevFriends) =>
          prevFriends.map((friend) => ({
            ...friend,
            isOnline: data.some(
              (onlineUser) => onlineUser.email === friend.email
            ),
            lastSeen:
              data.find((onlineUser) => onlineUser.email === friend.email)
                ?.lastSeen || friend.lastSeen,
          }))
        );
      }
      // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô object ‡∏°‡∏µ onlineUsers ‡πÄ‡∏õ‡πá‡∏ô array
      else if (data && Array.isArray(data.onlineUsers)) {
        setUsers((prevUsers) =>
          prevUsers.map((user) => ({
            ...user,
            isOnline: data.onlineUsers.includes(user.email),
            lastSeen:
              (data.lastSeenTimes && data.lastSeenTimes[user.email]) ||
              user.lastSeen,
          }))
        );
        setFriends((prevFriends) =>
          prevFriends.map((friend) => ({
            ...friend,
            isOnline: data.onlineUsers.includes(friend.email),
            lastSeen:
              (data.lastSeenTimes && data.lastSeenTimes[friend.email]) ||
              friend.lastSeen,
          }))
        );
      }
    });

    // ‡∏ü‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå
    socket.on("user-offline", (userData) => {
      setUsers((prevUsers) =>
        prevUsers.map((user) =>
          user.email === userData.email
            ? { ...user, isOnline: false, lastSeen: userData.lastSeen }
            : user
        )
      );
      setFriends((prevFriends) =>
        prevFriends.map((friend) =>
          friend.email === userData.email
            ? { ...friend, isOnline: false, lastSeen: userData.lastSeen }
            : friend
        )
      );
    });

    // ‡∏ü‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
    socket.on("user-online", (userData) => {
      setUsers((prevUsers) =>
        prevUsers.map((user) =>
          user.email === userData.email
            ? { ...user, isOnline: true, lastSeen: null }
            : user
        )
      );
      setFriends((prevFriends) =>
        prevFriends.map((friend) =>
          friend.email === userData.email
            ? { ...friend, isOnline: true, lastSeen: null }
            : friend
        )
      );
    });

    // ‡∏ü‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏≤‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
    socket.on("notify-friend-removed", async (data) => {
      if (data.to === userEmail) {
        console.log(`‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÇ‡∏î‡∏¢: ${data.from}`);

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
        await fetchCurrentUserAndFriends();

        // ‡πÅ‡∏™‡∏î‡∏á toast notification
        toast.info(`‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô`, {
          autoClose: 5000,
          position: "bottom-right",
        });
      }
    });

    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î event listeners ‡πÄ‡∏°‡∏∑‡πà‡∏≠ unmount
    return () => {
      socket.emit("user-offline", { email: userEmail });
      clearInterval(socketCheckInterval);
      socket.off("update-users");
      socket.off("user-offline");
      socket.off("user-online");
      socket.off("notify-friend-request");
      socket.off("notify-friend-accept");
      socket.off("notify-friend-removed");
    };
  }, [userEmail]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  const markNotificationAsRead = (notificationId) => {
    // ‡∏´‡∏≤‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏ã‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    const notificationElement = document.querySelector(
      `[data-notification-id="${notificationId}"]`
    );
    if (notificationElement) {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô
      notificationElement.classList.add("just-read");

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï state
      setTimeout(() => {
        setNotifications((prevNotifications) => {
          const updatedNotifications = prevNotifications.map((notification) => {
            if (notification.id === notificationId) {
              return { ...notification, read: true };
            }
            return notification;
          });

          return updatedNotifications;
        });
      }, 500); // ‡∏£‡∏≠‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö element ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï state ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      setNotifications((prevNotifications) => {
        return prevNotifications.map((notification) => {
          if (notification.id === notificationId) {
            return { ...notification, read: true };
          }
          return notification;
        });
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ newFriendRequest ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö notificationId ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢
    if (newFriendRequest && newFriendRequest.id === notificationId) {
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      setTimeout(() => {
        setNewFriendRequest(null); // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏≠‡∏Å
      }, 800);
    }
  };

  const handleSearch = (e) => {
    setSearchTerm(e.target.value.toLowerCase());
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏° roomId (UUID v4 ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢)
  function generateRoomId() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
      /[xy]/g,
      function (c) {
        const r = (Math.random() * 16) | 0,
          v = c === "x" ? r : (r & 0x3) | 0x8;
        return v.toString(16);
      }
    );
  }

  const handleAddFriend = async (friendEmail) => {
    try {
      setLoadingFriendEmail(friendEmail);
      // ‡πÉ‡∏ä‡πâ roomId ‡∏à‡∏≤‡∏Å useParams ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ gen ‡πÉ‡∏´‡∏°‡πà
      const finalRoomId = roomId || generateRoomId();

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
      const requestId = Date.now();

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
      const requestData = {
        from: {
          email: userEmail,
          displayName: displayName,
          photoURL: photoURL,
        },
        to: friendEmail,
        timestamp: new Date().toISOString(),
        type: "friend-request",
        requestId: requestId,
      };

      const response = await axios.post(
        `${import.meta.env.VITE_APP_API_BASE_URL}/api/friend-request`,
        requestData,
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      console.log("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", response.data);

      // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ socket ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö real-time ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
      // ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡∏ú‡πà‡∏≤‡∏ô REST API
      if (socket.connected) {
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö real-time ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        socket.emit("notify-friend-request", { to: friendEmail });
      }

      // ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      // await axios.post(
      //   `${import.meta.env.VITE_APP_API_BASE_URL}/api/add-friend`,
      //   {
      //     userEmail,
      //     friendEmail,
      //     roomId: finalRoomId,
      //   },
      //   {
      //     headers: {
      //       "Content-Type": "application/json",
      //     },
      //   }
      // );

      // const addedUser = users.find((user) => user.email === friendEmail);
      // if (addedUser) {
      //   setFriends((prev) =>
      //     [
      //       ...prev,
      //       {
      //         photoURL: addedUser.photoURL,
      //         email: addedUser.email,
      //         displayName: addedUser.displayName,
      //         isOnline: addedUser.isOnline || false,
      //       },
      //     ].sort((a, b) => a.displayName.localeCompare(b.displayName))
      //   );
      // }

      toast.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å " + friendEmail);
    } catch (error) {
      console.error("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô:", error);
      setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ");
      toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ");
    } finally {
      setLoadingFriendEmail(null);
    }
  };

  const handleRemoveFriend = async (friendEmail) => {
    try {
      setLoadingFriendEmail(friendEmail);

      // ‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô REST API
      await axios.delete(
        `${
          import.meta.env.VITE_APP_API_BASE_URL
        }/api/users/${userEmail}/friends/${friendEmail}`
      );
      try {
        await axios.delete(
          `${
            import.meta.env.VITE_APP_API_BASE_URL
          }/api/friend-request-email/${userEmail}/${friendEmail}`
        );
      } catch (err) {
        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô:", err);
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      setFriends((prevFriends) =>
        prevFriends.filter((friend) => friend.email !== friendEmail)
      );

      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô real-time ‡πÉ‡∏´‡πâ‡∏≠‡∏µ‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏ó‡∏£‡∏≤‡∏ö (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
      if (socket.connected) {
        socket.emit("notify-friend-removed", {
          to: friendEmail,
          from: userEmail,
        });
      }

      toast.success("‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡πç‡∏≤‡πÄ‡∏£‡πá‡∏à!");
    } catch (err) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô:", err);
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô");
      toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô");
    } finally {
      setLoadingFriendEmail(null);
    }
  };

  const isFriend = (email) =>
    Array.isArray(friends) && friends.some((friend) => friend.email === email);

  const handleProfileClick = (user) => {
    setSelectedUser(user);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedUser(null);
  };

  const handleClickOutside = (e) => {
    if (modalRef.current && !modalRef.current.contains(e.target)) {
      handleCloseModal();
    }
  };

  useEffect(() => {
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const filteredUsers = users.filter(
    (user) =>
      user.displayName.toLowerCase().includes(searchTerm) &&
      user.email !== userEmail
  );

  const fetchCurrentUser = async () => {
    try {
      const res = await axios.get(
        `${import.meta.env.VITE_APP_API_BASE_URL}/api/users/${userEmail}`
      );
      const userData = {
        ...res.data,
        following: Array.isArray(res.data.following) ? res.data.following : [],
      };
      setCurrentUser(userData);
      setLoadingCurrentUser(false);
    } catch (err) {
      setError("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ");
      setCurrentUser(null);
      setLoadingCurrentUser(false);
    }
  };
  const fetchGmailUser = async () => {
    try {
      const res = await axios.get(
        `${import.meta.env.VITE_APP_API_BASE_URL}/api/users/${userEmail}`
      );
      setCurrentUserfollow(res.data);
    } catch (err) {
      setError("‡πÇ‡∏´‡∏•‡∏î Gmail currentUser ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
    }
  };

  const handleFollow = async (targetEmail) => {
    await fetchGmailUser();
    if (!currentUserfollow || !Array.isArray(currentUserfollow.following)) {
      toast.error("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°");
      return;
    }
    const isFollowing = currentUserfollow.following.includes(targetEmail);
    const url = `${
      import.meta.env.VITE_APP_API_BASE_URL
    }/api/users/${userEmail}/${
      isFollowing ? "unfollow" : "follow"
    }/${targetEmail}`;
    const method = isFollowing ? "DELETE" : "POST";
    try {
      await axios({ method, url });
      await fetchGmailUser();
      toast.success(isFollowing ? "Unfollowed" : "Followed");
    } catch (err) {
      setError("Follow/unfollow error");
      toast.error("Follow/unfollow error");
    }
  };

  // Function to toggle notification dropdown
  const toggleNotificationDropdown = () => {
    setShowNotificationDropdown((prev) => !prev);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", notifications);
    console.log(
      "‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô:",
      notifications.filter((n) => n.type === "friend-request")
    );

    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
    // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏î‡πâ
    // ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (!showNotificationDropdown) {
      setTimeout(() => {
        setNotifications((prev) =>
          prev.map((notif) =>
            notif.type !== "friend-request" ? { ...notif, read: true } : notif
          )
        );
      }, 3000);
    }
  };

  useEffect(() => {
    if (!userEmail) {
      setCurrentUser(null);
      setLoadingCurrentUser(false);
      return;
    }
    fetchCurrentUser();
  }, [userEmail]);

  // Refs for the notification dropdown
  const notificationDropdownRef = useRef(null);
  const bellButtonRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      // For normal dropdowns
      const isClickInsideAny = Object.values(dropdownRefs.current).some((ref) =>
        ref?.contains(event.target)
      );
      if (!isClickInsideAny) {
        setOpenMenuFor(null);
      }

      // For notification dropdown
      if (
        showNotificationDropdown &&
        notificationDropdownRef.current &&
        !notificationDropdownRef.current.contains(event.target) &&
        bellButtonRef.current &&
        !bellButtonRef.current.contains(event.target)
      ) {
        setShowNotificationDropdown(false);
      }
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° event scroll ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î dropdown
    const handleScroll = () => {
      setOpenMenuFor(null);
      setShowNotificationDropdown(false);
    };

    document.addEventListener("mousedown", handleClickOutside);
    window.addEventListener("scroll", handleScroll, true); // true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏ó‡∏∏‡∏Å scroll

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
      window.removeEventListener("scroll", handleScroll, true);
    };
  }, [showNotificationDropdown]);

  const filteredFriends = friends.filter((friend) =>
    friend.displayName.toLowerCase().includes(searchTerm.toLowerCase())
  );
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  const clearReadNotifications = () => {
    console.log("üßπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß");

    setNotifications((prevNotifications) => {
      // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
      const unreadNotifications = prevNotifications.filter((n) => !n.read);
      console.log(
        `‚úÖ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô ${unreadNotifications.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`
      );
      return unreadNotifications;
    });
  };

  const fetchFollowInfo = async (targetEmail) => {
    try {
      const res = await axios.get(
        `${
          import.meta.env.VITE_APP_API_BASE_URL
        }/api/user/${targetEmail}/follow-info`
      );
      setFollowers(res.data.followers);
      setFollowing(res.data.following);
    } catch (error) {
      setError("Error fetching follow info");
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
  const handleFriendRequestResponse = async (requestId, response) => {
    // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    markNotificationAsRead(requestId);

    // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
    if (response === "accept") {
      // ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      const notification = notifications.find((n) => n.id === requestId);
      if (notification) {
        try {
          // ‡πÉ‡∏ä‡πâ roomId ‡∏à‡∏≤‡∏Å useParams ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ gen ‡πÉ‡∏´‡∏°‡πà
          const finalRoomId = roomId || generateRoomId();

          // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô REST API
          console.log("requestId:", requestId);
          console.log("userEmail:", userEmail);
          console.log("friendEmail:", notification.from.email);
          console.log("roomId:", finalRoomId);
          console.log("from:", userEmail, displayName, photoURL);
          console.log("to:", notification.from.email);
          console.log("timestamp:", new Date().toISOString());

          const responseData = await axios.post(
            `${
              import.meta.env.VITE_APP_API_BASE_URL
            }/api/friend-request-response`,
            {
              requestId: requestId,
              userEmail: userEmail,
              friendEmail: notification.from.email,
              response: "accept",
              roomId: finalRoomId,
              from: {
                email: userEmail,
                displayName: displayName,
                photoURL: photoURL,
              },
              to: notification.from.email,
              timestamp: new Date().toISOString(),
            },
            {
              headers: {
                "Content-Type": "application/json",
              },
            }
          );
          await axios.post(
            `${import.meta.env.VITE_APP_API_BASE_URL}/api/add-friend`,
            {
              userEmail: notification.from.email,
              friendEmail: userEmail,
              roomId: requestId,
            },
            {
              headers: {
                "Content-Type": "application/json",
              },
            }
          );

          console.log("‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", responseData.data);

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ UI
          const addedUser = users.find(
            (user) => user.email === notification.from.email
          );

          if (addedUser) {
            setFriends((prev) =>
              [
                ...prev,
                {
                  photoURL: addedUser.photoURL,
                  email: addedUser.email,
                  displayName: addedUser.displayName,
                  isOnline: addedUser.isOnline || false,
                },
              ].sort((a, b) => a.displayName.localeCompare(b.displayName))
            );
          }

          // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö real-time ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          // ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô API ‡πÅ‡∏•‡πâ‡∏ß
          if (socket.connected) {
            socket.emit("notify-friend-accept", {
              to: notification.from.email,
            });
          }

          // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á
          setNewFriendRequest(null);

          toast.success(
            `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏à‡∏≤‡∏Å ${notification.from.displayName}`
          );
        } catch (error) {
          console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô:", error);
          toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ");
        }
      }
    }
    // ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ä‡πâ handleDeleteFriendRequest ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÅ‡∏ó‡∏ô
  };
  useEffect(() => {
    const getNickNameF = async () => {
      try {
        const res = await axios.get(
          `${import.meta.env.VITE_APP_API_BASE_URL}/api/get-all-nicknames`
        );
        getNickName(res.data);
      } catch (err) {
        setError("‡πÇ‡∏´‡∏•‡∏î nickname ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
      }
    };
    getNickNameF();
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
  const handleDeleteFriendRequest = async (requestId) => {
    // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    markNotificationAsRead(requestId);

    try {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
      const notification = notifications.find((n) => n.id === requestId);
      if (notification) {
        // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ endpoint ‡πÅ‡∏£‡∏Å (‡∏î‡πâ‡∏ß‡∏¢ requestId)

        await axios.delete(
          `${
            import.meta.env.VITE_APP_API_BASE_URL
          }/api/friend-request/${requestId}`,
          {
            headers: {
              "Content-Type": "application/json",
            },
          }
        );

        // ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å UI
        setNotifications((prevNotifications) =>
          prevNotifications.filter((notif) => notif.id !== requestId)
        );

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        toast.success("‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
      }
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô:", error);
      toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ");
    }
  };

  return (
    <RequireLogin>
      <div className={`fr-container ${isDarkMode ? "dark-mode" : ""}`}>
        <ToastContainer position="top-right" autoClose={3000} hideProgressBar />
        <div className="text-xl-font-semibold">
          <div className="friend-header-container">
            <div className="profile-section">
              <div className="notification-container">
                <button
                  ref={bellButtonRef}
                  className="bell-btn-home"
                  aria-label="Notifications"
                  onClick={() =>
                    setShowNotificationDropdown(!showNotificationDropdown)
                  }
                >
                  <span className="bell-icon-home">&#128276;</span>
                  {notifications.filter((n) => !n.read).length > 0 && (
                    <span className="notifications-badge">
                      {notifications.filter((n) => !n.read).length}
                    </span>
                  )}
                </button>

                {/* Notification Dropdown */}
                {showNotificationDropdown && (
                  <div
                    className="notification-dropdown"
                    ref={notificationDropdownRef}
                  >
                    <h3>‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô</h3>
                    {console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå dropdown:", notifications)}
                    {notifications && notifications.length > 0 ? (
                      <>
                        <div className="notification-header">
                          <div className="notification-stats">
                            <p>
                              ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {notifications.length}
                            </p>
                            <p>
                              ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô:{" "}
                              {
                                notifications.filter(
                                  (n) => n.type === "friend-request"
                                ).length
                              }
                            </p>
                          </div>
                          <button
                            className="clear-read-button"
                            onClick={clearReadNotifications}
                          >
                            ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                          </button>
                        </div>
                        <ul className="notification-list">
                          {notifications.map((notif) => (
                            <li
                              key={notif.id}
                              data-notification-id={notif.id}
                              className={`notification-item ${
                                notif.read ? "read" : "unread"
                              }`}
                            >
                              <div
                                className="notification-content"
                                onClick={() => markNotificationAsRead(notif.id)}
                              >
                                <img
                                  src={
                                    notif.from?.photoURL ||
                                    "https://via.placeholder.com/40"
                                  }
                                  alt={notif.from?.displayName || "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}
                                  className="notification-avatar"
                                />
                                <div className="notification-details">
                                  <p>
                                    <strong>
                                      {notif.from?.displayName || "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}
                                    </strong>{" "}
                                    {isFriend(notif.from?.email)
                                      ? "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
                                      : "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô"}
                                  </p>
                                  <span className="notification-time">
                                    {new Date(notif.timestamp).toLocaleString(
                                      "th-TH"
                                    )}
                                  </span>
                                  {!isFriend(notif.from?.email) && (
                                    <div className="notification-actions">
                                      <button
                                        className="accept-btn"
                                        onClick={() => {
                                          console.log(
                                            "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ID:",
                                            notif.id
                                          );
                                          handleFriendRequestResponse(
                                            notif.id,
                                            "accept"
                                          );
                                        }}
                                      >
                                        ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö
                                      </button>
                                      <button
                                        className="decline-btn"
                                        onClick={(e) => {
                                          e.stopPropagation();
                                          console.log(
                                            "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ID:",
                                            notif.id
                                          );
                                          handleDeleteFriendRequest(notif.id);
                                        }}
                                      >
                                        ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
                                      </button>
                                    </div>
                                  )}
                                </div>
                              </div>
                            </li>
                          ))}
                        </ul>
                      </>
                    ) : (
                      <p className="no-notifications">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà</p>
                    )}
                  </div>
                )}
              </div>

              <span className="divider-home">|</span>
              <div className="profile-img-wrapper-home">
                <img
                  src={photoURL}
                  alt="Profile"
                  className="profile-image-home"
                />
              </div>
            </div>
          </div>
        </div>
        {error && <div className="error-message">{error}</div>}

        <div className="search-friend-con">
          <FaSearch className="search-icon-friend" />
          <input
            type="text"
            placeholder="Search Friend"
            value={searchTerm}
            onChange={handleSearch}
            className="search-input-chat"
            aria-label="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô"
          />
        </div>
        <div className="slide-con">
          <h2>Favorite</h2>
          <div
            className={
              filteredFriends.length === filteredUsers.length
                ? "special-friend-list"
                : filteredFriends.length > 0
                ? "con-friend-list"
                : "empty-friend-list"
            }
          >
            <ul className="friend-list">
              {filteredFriends.length > 0 ? (
                filteredFriends.map((friend, index) => (
                  <li key={index} className="button-friend-item">
                    <div className="mobile-small">
                      <img
                        src={friend.photoURL}
                        className="friend-photo"
                        alt={friend.displayName}
                      />
                      <div className="friend-detail-friend">
                        <span className="friend-name-friend">
                          {getnickName.find((n) => n.email === friend.email)
                            ?.nickname || friend.displayName}
                        </span>
                        <span className="friend-email">{friend.email}</span>
                      </div>
                    </div>
                    <div className="con-right">
                      <span
                        className={`status ${
                          friend.isOnline ? "online" : "offline"
                        }`}
                        aria-label={friend.isOnline ? "‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå" : "‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå"}
                      >
                        {friend.isOnline
                          ? "‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå"
                          : friend.lastSeen
                          ? `‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå - ${formatLastSeen(friend.lastSeen)}`
                          : "‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå"}
                      </span>
                      <div
                        className="dropdown-wrapper"
                        ref={(el) => (dropdownRefs.current[friend.email] = el)}
                      >
                        <button
                          onClick={() =>
                            setOpenMenuFor((prev) =>
                              prev === friend.email ? null : friend.email
                            )
                          }
                          className="dropdown-toggle"
                          aria-label="‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô"
                        >
                          <BsThreeDots size={20} />
                        </button>
                        {openMenuFor === friend.email && (
                          <div
                            className="dropdown-menu"
                            onMouseLeave={() => setOpenMenuFor(null)}
                          >
                            <button
                              className="dropdown-item"
                              onClick={() => {
                                handleProfileClick(friend);
                                fetchFollowInfo(friend.email);
                                setOpenMenuFor(null);
                              }}
                              aria-label="‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
                            >
                              Profile
                            </button>
                            <button
                              className="dropdown-item"
                              onClick={() => {
                                if (
                                  !currentUserfollow ||
                                  !Array.isArray(currentUserfollow.following)
                                )
                                  return;
                                handleFollow(friend.email);
                              }}
                              aria-label={
                                Array.isArray(currentUserfollow?.following) &&
                                currentUserfollow.following.includes(
                                  friend.email
                                )
                                  ? "Following"
                                  : "Follow"
                              }
                            >
                              {Array.isArray(currentUserfollow?.following) &&
                              currentUserfollow.following.includes(friend.email)
                                ? "Following"
                                : "Follow"}
                            </button>
                            <button
                              className="dropdown-item danger"
                              onClick={() => {
                                handleRemoveFriend(friend.email);
                                setOpenMenuFor(null);
                              }}
                              disabled={loadingFriendEmail === friend.email}
                              aria-label="‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô"
                            >
                              {loadingFriendEmail === friend.email
                                ? "Deleting..."
                                : "Delete Friend"}
                            </button>
                          </div>
                        )}
                      </div>
                    </div>
                  </li>
                ))
              ) : (
                <div className="empty-friend">
                  <div className="roomlist-empty-loading">
                    <div className="roomlist-empty-spinner">
                      <div className="roomlist-empty-bar"></div>
                      <div className="roomlist-empty-bar"></div>
                      <div className="roomlist-empty-bar"></div>
                      <div className="roomlist-empty-bar"></div>
                    </div>
                    <div className="roomlist-empty-text">
                      ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
                    </div>
                  </div>
                </div>
              )}
            </ul>
          </div>
          <h2>Online Users</h2>
          <div
            className={
              filteredUsers.filter(
                (user) => !isFriend(user.email) && user.isOnline === true
              ).length > 0 && filteredFriends.length === 0
                ? "special-friend-recommand"
                : filteredUsers.filter(
                    (user) => !isFriend(user.email) && user.isOnline === true
                  ).length === 0
                ? "empty-friend-recommand"
                : "con-friend-recommand"
            }
          >
            {filteredUsers.filter(
              (user) => !isFriend(user.email) && user.isOnline === true
            ).length === 0 && (
              <div className="empty-friend">
                <div className="roomlist-empty-loading">
                  <div className="roomlist-empty-text">
                    ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ
                  </div>
                </div>
              </div>
            )}
            <ul className="friend-recommend">
              {!loadingCurrentUser &&
                filteredUsers
                  .filter(
                    (user) => !isFriend(user.email) && user.isOnline === true
                  )
                  .map((user, index) => (
                    <li key={index} className="button-friend-item">
                      <div className="mobile-small">
                        <img
                          src={user.photoURL}
                          alt={user.displayName}
                          className="friend-photo"
                        />
                        <div className="friend-detail-friend">
                          <span className="friend-name-friend">
                            {getnickName.find((n) => n.email === user.email)
                              ?.nickname || user.displayName}
                          </span>
                          <span className="friend-email">{user.email}</span>
                        </div>
                      </div>
                      <div className="con-right">
                        <span
                          className={`status ${
                            user.isOnline ? "online" : "offline"
                          }`}
                          aria-label={user.isOnline ? "‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå" : "‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå"}
                        >
                          {user.isOnline
                            ? "‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå"
                            : user.lastSeen
                            ? `‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå - ${formatLastSeen(user.lastSeen)}`
                            : "‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå"}
                        </span>
                        <button
                          className="add-friend-btn"
                          onClick={() => handleAddFriend(user.email)}
                          disabled={loadingFriendEmail === user.email}
                          aria-label="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô"
                        >
                          {loadingFriendEmail === user.email ? (
                            "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°..."
                          ) : (
                            <IoMdPersonAdd />
                          )}
                        </button>
                        <div
                          className="dropdown-wrapper"
                          ref={(el) => (dropdownRefs.current[user.email] = el)}
                        >
                          <button
                            onClick={() =>
                              setOpenMenuFor((prev) =>
                                prev === user.email ? null : user.email
                              )
                            }
                            className="dropdown-toggle"
                            aria-label="‡πÄ‡∏°‡∏ô‡∏π‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                          >
                            <BsThreeDots size={20} />
                          </button>
                          {openMenuFor === user.email && (
                            <div
                              className="dropdown-menu"
                              onMouseLeave={() => setOpenMenuFor(null)}
                            >
                              <button
                                className="dropdown-item"
                                onClick={() => {
                                  handleProfileClick(user);
                                  setOpenMenuFor(null);
                                }}
                                aria-label="‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
                              >
                                Profile
                              </button>
                              <button
                                className="dropdown-item"
                                onClick={() => {
                                  if (
                                    !currentUserfollow ||
                                    !Array.isArray(currentUserfollow.following)
                                  )
                                    return;
                                  handleFollow(user.email);
                                }}
                                aria-label={
                                  Array.isArray(currentUserfollow?.following) &&
                                  currentUserfollow.following.includes(
                                    user.email
                                  )
                                    ? "Following"
                                    : "Follow"
                                }
                              >
                                {Array.isArray(currentUserfollow?.following) &&
                                currentUserfollow.following.includes(user.email)
                                  ? "Following"
                                  : "Follow"}
                              </button>
                            </div>
                          )}
                        </div>
                      </div>
                    </li>
                  ))}
            </ul>
          </div>
        </div>
        {isModalOpen && selectedUser && (
          <div className="profile-modal">
            <div className="modal-content" ref={modalRef}>
              <div className="profile-info">
                <img
                  src={selectedUser.photoURL}
                  alt={selectedUser.displayName}
                  className="profile-photo"
                />
                <h2>
                  {getnickName.find((n) => n.email === selectedUser.email)
                    ?.nickname || selectedUser.displayName}
                </h2>
                <div className="tabs">
                  <ul className="followers">
                    <li>{followers.length} followers</li>
                  </ul>
                  <ul className="following">
                    <li>{following.length} following</li>
                  </ul>
                </div>
                <p>Email: {selectedUser.email}</p>
                <p>
                  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:{" "}
                  {selectedUser.isOnline
                    ? "‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå"
                    : selectedUser.lastSeen
                    ? `‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå - ‡πÄ‡∏´‡πá‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ${formatLastSeen(
                        selectedUser.lastSeen
                      )}`
                    : "‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå"}
                </p>
                <button
                  className="close-btn"
                  onClick={handleCloseModal}
                  aria-label="‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
                >
                  ‡∏õ‡∏¥‡∏î
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </RequireLogin>
  );
};

export default Friend;
