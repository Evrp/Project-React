import { useState } from "react";
import axios from "axios";
import { IoMdAddCircle, IoMdCloseCircle } from "react-icons/io";
import { useParams } from "react-router-dom";
import "./createroom.css";
const CreateRoom = ({ onRoomCreated }) => {
  const { roomId } = useParams();
  const [showForm, setShowForm] = useState(false);
  const [roomData, setRoomData] = useState({
    name: "",
    image: "",
    description: "",
  });
  const [isReloading, setIsReloading] = useState(false);

  const handleChange = (e) => {
    setRoomData({ ...roomData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const createdBy = localStorage.getItem("userName") || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏ã‡πâ‡∏≥
    const res = await axios.get(`${import.meta.env.VITE_APP_API_BASE_URL}/api/allrooms`);
    const allRooms = res.data;
    const isDuplicate = allRooms.some(
      (room) =>
        room.name.trim().toLowerCase() === roomData.name.trim().toLowerCase()
    );

    if (isDuplicate) {
      alert("‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà");
      return;
    }

    try {
      const res = await axios.post(`${import.meta.env.VITE_APP_API_BASE_URL}/api/createroom`, {
        ...roomData,
        createdBy,
        roomId,
      });
      onRoomCreated(res.data);
      setRoomData({ name: "", image: "", description: "" });
      setShowForm(false);
      setIsReloading(true); // üî• ‡πÅ‡∏™‡∏î‡∏á animation

      setTimeout(() => {
        window.location.reload();
      }, 1500); // ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤ animation ‡πÇ‡∏ä‡∏ß‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î
    } catch (err) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á:", err);
    }
  };

  return (
    <div className="create-room-bt">
      <button className ="create-room-button" onClick={() => setShowForm(!showForm)}>
        {showForm ? <IoMdCloseCircle /> : <IoMdAddCircle />}
        {showForm ? "Cancel" : "Create Room"}
      </button>

      {showForm && (
        <div className="popup-overlay" onClick={() => setShowForm(false)}>
          <div className="popup-form" onClick={(e) => e.stopPropagation()}>
            <h3>Create Room</h3>
            <form onSubmit={handleSubmit}>
              <input
                type="text"
                className="commu-input"
                name="name"
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á"
                value={roomData.name}
                onChange={handleChange}
                required
              />
              <input
                type="text"
                name="image"
                className="commu-input"
                placeholder="‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡πâ‡∏≠‡∏á"
                value={roomData.image}
                onChange={handleChange}
              />

              {/* ‡πÅ‡∏™‡∏î‡∏á preview ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ */}
              {roomData.image && (
                <div className="image-preview">
                  <img src={roomData.image} alt="Preview" />
                </div>
              )}

              <textarea
                name="description"
                className="commu-input"
                placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
                value={roomData.description}
                onChange={handleChange}
              />
              <button type="submit">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á</button>
            </form>
          </div>
        </div>
      )}
      {isReloading && (
        <div className="reload-overlay">
          <div className="loader"></div>
          <p>Loading...</p>
        </div>
      )}
    </div>
  );
};

export default CreateRoom;
