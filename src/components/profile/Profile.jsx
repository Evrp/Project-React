import React, { useState, useContext, useEffect } from "react";
import "./Profile.css";
import { Button } from "@/components/ui";
import { EventContext } from "../../context/eventcontext.jsx";
import { useNavigate } from "react-router-dom";

const genreOptions = [
  "Arts",
  "Movie",
  "Music",
  "Party",
  "Concert",
  "Golf",
  "Snooker",
  "Football",
  "Muaythai",
  "Book",
  "Game",
  "Food",
  "Vocal",
];

const Profile = () => {
  const userName = localStorage.getItem("userName");
  const userPhoto = localStorage.getItem("userPhoto");
  const navigate = useNavigate();
  const { setEvents } = useContext(EventContext);
  const [originalGenres, setOriginalGenres] = useState([]);

  const [selectedGenres, setSelectedGenres] = useState(
    JSON.parse(localStorage.getItem("selectedGenres")) || []
  );

  const [userInfo, setUserInfo] = useState(
    JSON.parse(localStorage.getItem("userInfo")) || {
      detail: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à...",
      description: "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡∏£‡∏π‡πâ...",
      extra: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°...",
    }
  );

  const [editingGenres, setEditingGenres] = useState(false);
  const [editingField, setEditingField] = useState(null); // ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç

  const [tempInfo, setTempInfo] = useState({ ...userInfo }); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏ß‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß

  const toggleGenre = (genre) => {
    setSelectedGenres((prev) =>
      prev.includes(genre) ? prev.filter((g) => g !== genre) : [...prev, genre]
    );
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;

    const wordCount = value.trim().split(/\s+/).length;
    if (wordCount > 400) return; // ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 400 ‡∏Ñ‡∏≥ ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤

    setTempInfo((prev) => ({ ...prev, [name]: value }));
  };

  const handleSaveInfo = async () => {
    const email = localStorage.getItem("userEmail");

    if (!email) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
      return;
    }

    try {
      const response = await fetch("http://localhost:8080/api/save-user-info", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, userInfo: tempInfo }),
      });

      if (response.ok) {
        setUserInfo(tempInfo);
        setEditingField(null);
        console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } else {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      }
    } catch (error) {
      console.error("üö® Error:", error);
    }
  };
  useEffect(() => {
    const fetchUserInfo = async () => {
      const email = localStorage.getItem("userEmail");
      if (!email) return;

      try {
        const res = await fetch(
          `http://localhost:8080/api/user-info?email=${email}`
        );
        if (res.ok) {
          const data = await res.json();
          setUserInfo(data);
          setTempInfo(data); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
        }
      } catch (err) {
        console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• userInfo ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
      }
    };

    fetchUserInfo();
  }, []);

  const handleEditGenres = async () => {
    const email = localStorage.getItem("userEmail");

    if (!email) {
      console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
      return;
    }

    try {
      const response = await fetch("http://localhost:8080/api/update-genres", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, genres: selectedGenres }),
      });

      if (response.ok) {
        const data = await response.json();
        console.log("üé∂ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", data);
        localStorage.setItem("selectedGenres", JSON.stringify(selectedGenres));
      } else {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á");
      }
    } catch (error) {
      console.error("üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    }

    setEditingGenres(false);
  };

  const handleClearGenres = async () => {
    const email = localStorage.getItem("userEmail");
    if (!email) {
      console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
      return;
    }

    const clearedGenres = [];

    try {
      const response = await fetch("http://localhost:8080/api/update-genres", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, genres: clearedGenres }),
      });

      if (response.ok) {
        console.log("üßπ ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
        setSelectedGenres([]);
        localStorage.setItem("selectedGenres", JSON.stringify([]));
      } else {
        console.error("‚ùå ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    } catch (error) {
      console.error("üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    }
  };

  if (!userName || !userPhoto) {
    return (
      <div className="container-profile">
        <div className="text-center mt-8">
          <h2 className="text-xl font-semibold">
            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
          </h2>
          <Button className="mt-4" onClick={() => navigate("/login")}>
            ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="container-profile">
      <div className="profile-container">
        <img src={userPhoto} alt="Profile" className="profile-image" />
        <h2>{`${userName}`}</h2>

        <div className="info-wrapper">
          {/* üìù ‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
          <div className="info-box">
            <h3>About Me</h3>
            {editingField === "detail" ? (
              <div>
                <textarea
                  name="detail"
                  value={tempInfo.detail}
                  onChange={handleInputChange}
                  rows={3}
                  placeholder="‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
                />
                <p className="word-limit-info">
                  {tempInfo.detail.trim().split(/\s+/).filter(Boolean).length} /
                  400 ‡∏Ñ‡∏≥
                </p>
              </div>
            ) : (
              <p
                onClick={() => {
                  setEditingField("detail");
                  setTempInfo({ ...userInfo });
                }}
                style={{ color: !userInfo.detail ? "#999" : "inherit" }} // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
              >
                {userInfo.detail || "‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"}
              </p>
            )}

            {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
            {editingField && (
              <div className="save-button-container">
                <Button onClick={handleSaveInfo} className="save-button">
                  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                </Button>
              </div>
            )}
          </div>

          {/* üéµ ‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á */}
          <div className="info-box">
            <h3>Activities</h3>
            {editingGenres ? (
              <div className="filter-genres">
                {genreOptions.map((genre) => (
                  <button
                    key={genre}
                    onClick={() => toggleGenre(genre)}
                    className={`genre-button ${
                      selectedGenres.includes(genre) ? "selected" : ""
                    }`}
                  >
                    {genre}
                  </button>
                ))}
              </div>
            ) : (
              <div className="filter-genres">
                {selectedGenres.length > 0 ? (
                  selectedGenres.map((genre) => (
                    <span key={genre} className="genre-button selected">
                      {genre}
                    </span>
                  ))
                ) : (
                  <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á</p>
                )}
              </div>
            )}

            <div className="center-wrapper">
              {editingGenres ? (
                <>
                  <Button onClick={handleEditGenres} className="edit-button">
                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                  </Button>
                  {JSON.stringify(originalGenres) !==
                    JSON.stringify(selectedGenres) && (
                    <Button
                      onClick={() => {
                        setSelectedGenres(originalGenres);
                        setEditingGenres(false);
                      }}
                      className="edit-button-cancel-button"
                    >
                      ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                    </Button>
                  )}
                </>
              ) : (
                <Button
                  onClick={() => {
                    setOriginalGenres([...selectedGenres]);
                    setEditingGenres(true);
                  }}
                  className="edit-button"
                >
                  ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </Button>
              )}
              {editingGenres && (
                <Button
                  onClick={handleClearGenres}
                  className="edit-button-cancel-button"
                >
                  ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                </Button>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Profile;
