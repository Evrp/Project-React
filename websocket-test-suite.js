/**
 * WebSocket Test Suite ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Socket.io
 * ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ load testing ‡πÑ‡∏î‡πâ
 * 
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: node websocket-test-suite.js [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô users] [‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ms] [‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ]
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 
 *   - node websocket-test-suite.js 10 500 
 *     (‡∏ó‡∏î‡∏™‡∏≠‡∏ö 10 ‡∏Ñ‡∏ô, ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏∏‡∏Å 500ms, ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
 *   - node websocket-test-suite.js 20 200 60
 *     (‡∏ó‡∏î‡∏™‡∏≠‡∏ö 20 ‡∏Ñ‡∏ô, ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏∏‡∏Å 200ms, ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
 */

import { io } from 'socket.io-client';
import chalk from 'chalk'; // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô: npm install chalk
import { performance } from 'perf_hooks';
import os from 'os';

// Configuration
const DEFAULT_USERS = 5;
const DEFAULT_DELAY = 1000; // 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
const DEFAULT_DURATION = 30000; // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
const SOCKET_URL = process.env.VITE_APP_API_BASE_URL;

// ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å command line
// ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: node websocket-test-suite.js [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ] [‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå ms] [‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö s]
const userCount = parseInt(process.argv[2], 10) || DEFAULT_USERS;
const connectionDelay = parseInt(process.argv[3], 10) || DEFAULT_DELAY;
// ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà 3 ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ms
const TEST_DURATION = (parseInt(process.argv[4], 10) || DEFAULT_DURATION/1000) * 1000;

console.log(chalk.blue('==============================================='));
console.log(chalk.blue('üìä WebSocket Test Suite - Professional Edition'));
console.log(chalk.blue('==============================================='));
console.log(chalk.yellow(`üîå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á: ${SOCKET_URL}`));
console.log(chalk.yellow(`üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏•‡∏≠‡∏á: ${userCount}`));
console.log(chalk.yellow(`‚è±Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ${connectionDelay}ms`));
console.log(chalk.yellow(`‚åõ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${TEST_DURATION/1000} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`));
console.log(chalk.gray(`üí° ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: node websocket-test-suite.js [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ] [‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå ms] [‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ]`));
console.log(chalk.blue('===============================================\n'));

// ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
const stats = {
  connectSuccess: 0,
  connectFail: 0,
  messagesReceived: 0,
  messagesSent: 0,
  errors: [],
  latency: [],
  startTime: performance.now(),
  endTime: null
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡πÄ‡∏Å‡πá‡∏ö connections
const connections = [];
const socketEvents = {};

// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏£‡∏∞‡∏ö‡∏ö
function logSystemResources() {
  const totalMem = os.totalmem();
  const freeMem = os.freemem();
  const usedMem = totalMem - freeMem;
  const memUsage = process.memoryUsage();
  
  console.log(chalk.cyan('\nüìà ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏£‡∏∞‡∏ö‡∏ö:'));
  console.log(chalk.cyan(`   CPU Load: ${os.loadavg()[0].toFixed(2)}%`));
  console.log(chalk.cyan(`   Memory: ${Math.round(usedMem/1024/1024)}MB / ${Math.round(totalMem/1024/1024)}MB (${(usedMem/totalMem*100).toFixed(2)}%)`));
  console.log(chalk.cyan(`   Node.js Heap: ${Math.round(memUsage.heapUsed/1024/1024)}MB / ${Math.round(memUsage.heapTotal/1024/1024)}MB`));
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏•‡∏≠‡∏á
function createMockUser(id) {
  return {
    email: `test${id}@example.com`,
    displayName: `Test User ${id}`,
    photoURL: `https://randomuser.me/api/portraits/men/${id % 100}.jpg`
  };
}

// ‡πÅ‡∏™‡∏î‡∏á progress bar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
function printProgressBar(current, total) {
  const percent = Math.round((current / total) * 100);
  const filledLength = Math.round(40 * current / total);
  const bar = '‚ñà'.repeat(filledLength) + '-'.repeat(40 - filledLength);
  
  process.stdout.clearLine();
  process.stdout.cursorTo(0);
  process.stdout.write(chalk.green(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: [${bar}] ${percent}% (${current}/${total})`));
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket
function connectUser(userId) {
  return new Promise((resolve) => {
    const user = createMockUser(userId);
    const startConnectTime = performance.now();
    
    try {
      const socket = io(SOCKET_URL, {
        transports: ['websocket'],
        forceNew: true,
        reconnection: true,
        timeout: 5000
      });
      
      // ‡πÄ‡∏Å‡πá‡∏ö reference ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
      connections.push(socket);
      
      socket.on('connect', () => {
        const connectTime = performance.now() - startConnectTime;
        stats.latency.push(connectTime);
        stats.connectSuccess++;
        
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
        socket.emit('user-online', user);
        stats.messagesSent++;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° event counters
        ['update-users', 'user-online', 'user-offline'].forEach(event => {
          if (!socketEvents[event]) socketEvents[event] = 0;
          
          socket.on(event, (data) => {
            socketEvents[event]++;
            stats.messagesReceived++;
            
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ping/pong ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏î latency
            if (Math.random() < 0.1) { // 10% chance
              const pingStart = performance.now();
              socket.emit('user-ping', user);
              stats.messagesSent++;
              setTimeout(() => {
                stats.latency.push(performance.now() - pingStart);
              }, 50);
            }
          });
        });
        
        // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
        simulateCommunication(socket, user);
        
        resolve(true);
      });
      
      socket.on('connect_error', (err) => {
        stats.connectFail++;
        stats.errors.push(`Connect Error (User ${userId}): ${err.message}`);
        console.log(chalk.red(`\n‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ${userId}: ${err.message}`));
        resolve(false);
      });
      
      socket.on('error', (err) => {
        stats.errors.push(`Socket Error (User ${userId}): ${err.message}`);
        console.log(chalk.red(`\n‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Socket ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ${userId}: ${err.message}`));
      });
      
    } catch (err) {
      stats.connectFail++;
      stats.errors.push(`Exception (User ${userId}): ${err.message}`);
      console.log(chalk.red(`\nüí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ${userId}: ${err.message}`));
      resolve(false);
    }
  });
}

// ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
function simulateCommunication(socket, user) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏° ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 5-15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  const interval = 5000 + Math.floor(Math.random() * 10000);
  
  const timer = setInterval(() => {
    // ‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥
    const action = Math.floor(Math.random() * 3);
    
    switch (action) {
      case 0: // ‡∏™‡πà‡∏á ping
        socket.emit('user-ping', user);
        stats.messagesSent++;
        break;
        
      case 1: // ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ online/offline
        if (Math.random() > 0.5) {
          socket.emit('user-offline', { email: user.email });
          stats.messagesSent++;
          
          // ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3-8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          setTimeout(() => {
            socket.emit('user-online', user);
            stats.messagesSent++;
          }, 3000 + Math.floor(Math.random() * 5000));
        }
        break;
        
      case 2: // ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ - ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏á‡∏µ‡∏¢‡∏ö
        break;
    }
  }, interval);
  
  // ‡πÄ‡∏Å‡πá‡∏ö reference ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
  socket._timer = timer;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô test suite
async function runTestSuite() {
  console.log(chalk.green('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏•‡∏≠‡∏á...'));
  
  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  for (let i = 1; i <= userCount; i++) {
    printProgressBar(i, userCount);
    await connectUser(i);
    
    if (i < userCount) {
      await new Promise(resolve => setTimeout(resolve, connectionDelay));
    }
  }
  
  console.log(chalk.green('\n\n‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå'));
  console.log(chalk.yellow('üß™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥...'));
  
  // ‡∏£‡∏±‡∏ô load test ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  setTimeout(() => endTest(), TEST_DURATION);
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  const statsInterval = setInterval(() => {
    const elapsedTime = ((performance.now() - stats.startTime) / 1000).toFixed(1);
    console.log(chalk.cyan(`\n‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${elapsedTime} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`));
    console.log(chalk.cyan(`üì® ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö: ${stats.messagesReceived}, ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á: ${stats.messagesSent}`));
    logSystemResources();
  }, 5000);
}

// ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
function endTest() {
  stats.endTime = performance.now();
  const testDuration = (stats.endTime - stats.startTime) / 1000;
  
  console.log(chalk.blue('\n\n==============================================='));
  console.log(chalk.blue('üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö WebSocket'));
  console.log(chalk.blue('==============================================='));
  
  console.log(chalk.yellow(`‚åõ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${testDuration.toFixed(2)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`));
  console.log(chalk.yellow(`üë• ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${stats.connectSuccess}/${userCount} (${((stats.connectSuccess/userCount)*100).toFixed(1)}%)`));
  console.log(chalk.yellow(`üì© ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ‡∏£‡∏±‡∏ö ${stats.messagesReceived}, ‡∏™‡πà‡∏á ${stats.messagesSent}`));
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ latency
  if (stats.latency.length > 0) {
    const avgLatency = stats.latency.reduce((a, b) => a + b, 0) / stats.latency.length;
    const minLatency = Math.min(...stats.latency);
    const maxLatency = Math.max(...stats.latency);
    
    console.log(chalk.yellow(`‚è±Ô∏è Latency: ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ${avgLatency.toFixed(2)}ms, ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î ${minLatency.toFixed(2)}ms, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${maxLatency.toFixed(2)}ms`));
  }
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á events
  console.log(chalk.yellow('\nüìä ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Events:'));
  Object.keys(socketEvents).forEach(event => {
    console.log(chalk.yellow(`   - ${event}: ${socketEvents[event]} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`));
  });
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  if (stats.errors.length > 0) {
    console.log(chalk.red('\n‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö:'));
    stats.errors.forEach((err, i) => {
      if (i < 10 || stats.errors.length < 20) {
        console.log(chalk.red(`   - ${err}`));
      } else if (i === 10 && stats.errors.length >= 20) {
        console.log(chalk.red(`   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${stats.errors.length - 10} ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î`));
      }
    });
  }
  
  console.log(chalk.blue('\n==============================================='));
  console.log(chalk.blue('üèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'));
  console.log(chalk.blue('===============================================\n'));
  
  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
  connections.forEach(socket => {
    clearInterval(socket._timer);
    socket.disconnect();
  });
  
  process.exit(0);
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
runTestSuite();
