// ‚úÖ Import libraries ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
import express from "express";
import cors from "cors";
import bodyParser from "body-parser";
import dotenv from "dotenv";
import http from "http";
import { Server } from "socket.io";
import userRoutes from "./routes/gmail.js";
import friendRoutes from "./routes/friend.js";
import roomRoutes from "./routes/room.js";
import infoRoutes  from "./routes/info.js";
import eventRoutes from "./routes/event.js";
import likeRoutes from "./routes/like.js"; // Routes from "./routes/like.js";
import roommatchRoutes  from "./routes/eventmatch.js"; // Routes from "./routes/room.js";
import mongoose from "mongoose";
import { Filter } from "./src/model/filter.js";
import axios from "axios";

// Import new routes (ES Modules style)
import friendRequestRoutes from "./routes/friendRequest.js";
import friendApiRoutes from "./routes/friendApi.js";

// Debug routes
console.log("Registered routes:");
console.log("- friendRequestRoutes:", Object.keys(friendRequestRoutes).length > 0 ? "Loaded" : "Empty");




dotenv.config();
const allowedOrigins = [
  "https://project-react-mocha-eta.vercel.app", // production frontend
  "http://localhost:5173", // local dev frontend
];

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: allowedOrigins,
    methods: ["GET", "POST"],
    credentials: true,
  },
});

const port = process.env.PORT || 8080;
const MONGO_URI = process.env.MONGO_URI;
const MAKE_WEBHOOK_URL = process.env.MAKE_WEBHOOK_URL;
// ‚úÖ Middleware
app.use(
  cors({
    origin: allowedOrigins,
    credentials: true,
  })
);
app.use(bodyParser.json());

// ‚úÖ Connect MongoDB
mongoose.connect(MONGO_URI);
const db = mongoose.connection;
db.once("open", () => console.log("üî• MongoDB Connected"));
db.on("error", (err) => console.error("‚ùå MongoDB Error:", err));

const onlineUsers = new Map(); // email => Set of socket IDs
const userDetails = new Map(); // email => {displayName, photoURL, email}
const lastSeenTimes = new Map(); // email => timestamp ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const userSockets = {}; // email => socket.id (‡πÄ‡∏Å‡πá‡∏ö socket ID ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ user)

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å client
const broadcastUserStatus = () => {
  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  const onlineUsersEmails = Array.from(onlineUsers.keys());
  const lastSeenObj = {};
  
  // ‡πÅ‡∏õ‡∏•‡∏á Map ‡πÄ‡∏õ‡πá‡∏ô object ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
  lastSeenTimes.forEach((timestamp, email) => {
    lastSeenObj[email] = timestamp;
  });
  
  io.emit("update-users", {
    onlineUsers: onlineUsersEmails,
    lastSeenTimes: lastSeenObj
  });
};

io.on("connection", (socket) => {
  console.log("üü¢ New client connected", socket.id);

  socket.on("user-online", (user) => {
    console.log("üßë‚Äçüíª User online", user);
    const { email, displayName, photoURL } = user;
    if (!email) return;
    
    socket.email = email;
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    userDetails.set(email, { displayName, photoURL, email });
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° socket.id ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Set
    if (!onlineUsers.has(email)) {
      onlineUsers.set(email, new Set());
    }
    onlineUsers.get(email).add(socket.id);
    
    // ‡πÄ‡∏Å‡πá‡∏ö socket ID ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
    userSockets[email] = socket.id;
    
    // ‡∏•‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß)
    lastSeenTimes.delete(email);
    
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
    broadcastUserStatus();
    
    // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
    io.emit("user-online", {
      email,
      displayName,
      photoURL,
      isOnline: true
    });
  });

  socket.on("user-ping", (userData) => {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (userData && userData.email) {
      const { email, displayName, photoURL } = userData;
      if (onlineUsers.has(email)) {
        // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ socket id ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà
        onlineUsers.set(email, new Set([socket.id]));
        socket.email = email;
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        if (displayName && photoURL) {
          userDetails.set(email, { displayName, photoURL, email });
        }
        
        // ‡∏•‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß)
        lastSeenTimes.delete(email);
        
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
        broadcastUserStatus();
      }
    }
  });
  
  socket.on("user-offline", (userData) => {
    if (userData && userData.email) {
      const { email } = userData;
      if (email && onlineUsers.has(email)) {
        onlineUsers.get(email).delete(socket.id);
        if (onlineUsers.get(email).size === 0) {
          onlineUsers.delete(email);
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå
          const timestamp = new Date().toISOString();
          lastSeenTimes.set(email, timestamp);
          
          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          io.emit("user-offline", {
            email,
            isOnline: false,
            lastSeen: timestamp,
            displayName: userDetails.get(email)?.displayName,
            photoURL: userDetails.get(email)?.photoURL
          });
        }
      }
      
      // ‡∏™‡πà‡∏á user list ‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å client
      broadcastUserStatus();
    }
  });

  socket.on("disconnect", () => {
    console.log("üî¥ Client disconnected", socket.id);
    const email = socket.email;
    if (email && onlineUsers.has(email)) {
      onlineUsers.get(email).delete(socket.id);
      if (onlineUsers.get(email).size === 0) {
        onlineUsers.delete(email); // ‡πÑ‡∏°‡πà‡∏°‡∏µ socket ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡πâ‡∏ß
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå
        const timestamp = new Date().toISOString();
        lastSeenTimes.set(email, timestamp);
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        io.emit("user-offline", {
          email,
          isOnline: false,
          lastSeen: timestamp,
          displayName: userDetails.get(email)?.displayName,
          photoURL: userDetails.get(email)?.photoURL
        });
      }
    }

    // ‡∏™‡πà‡∏á user list ‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å client
    broadcastUserStatus();
  });
});
// üìå API ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
app.post("/api/update-genres", async (req, res) => {
  const { email, genres, subGenres, updatedAt } = req.body;
  if (!email || !genres || !subGenres) {
    return res
      .status(400)
      .json({ message: "Missing email, genres, or subGenres" });
  }

  try {
    const user = await Filter.findOneAndUpdate(
      { email },
      { genres, subGenres: subGenres || {} },
      { new: true, upsert: true } // ‡πÄ‡∏û‡∏¥‡πà‡∏° upsert ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ user ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Filter
    );

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Make.com ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà genres/subGenres ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const hasGenres = Array.isArray(genres) ? genres.length > 0 : false;
    const hasSubGenres = subGenres && typeof subGenres === "object" && Object.values(subGenres).some(arr => Array.isArray(arr) ? arr.length > 0 : false);
    if (hasGenres && hasSubGenres) {
      await axios.post(MAKE_WEBHOOK_URL, {
        type: "update-genres",
        filter_info: {
          email: user.email,
          genres: user.genres,
          subGenres: user.subGenres,
          updatedAt: updatedAt || new Date().toISOString(),
        },
      });
    }

    res
      .status(200)
      .json({ message: "Genres updated & sent to Make.com", user });
  } catch (error) {
    console.error("‚ùå Update failed:", error);
    res.status(500).json({ message: "Server error" });
  }
});

// ‡πÄ‡∏Å‡πá‡∏ö socket instance ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô middleware
app.set('io', io);
app.set('userSockets', userSockets);

// ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á debug ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API routes ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/api/debug/routes', (req, res) => {
  const routes = [];
  app._router.stack.forEach(middleware => {
    if (middleware.route) {
      // Routes registered directly on the app
      routes.push({
        path: middleware.route.path,
        methods: Object.keys(middleware.route.methods)
      });
    } else if (middleware.name === 'router') {
      // Router middleware
      middleware.handle.stack.forEach(handler => {
        if (handler.route) {
          routes.push({
            path: '/api' + handler.route.path,
            methods: Object.keys(handler.route.methods)
          });
        }
      });
    }
  });
  res.json(routes);
});

// ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô routes ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡πÑ‡∏ß‡πâ
app.use("/api", userRoutes);
app.use("/api", friendRoutes);
app.use("/api", roomRoutes);
app.use("/api", eventRoutes);
app.use("/api", infoRoutes);
app.use("/api", roommatchRoutes);
app.use("/api", likeRoutes);

// ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô friendRequest routes ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á 404
app.use("/api", friendRequestRoutes);
app.use("/api", friendApiRoutes);


// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
server.listen(port, () =>
  console.log(`üöÄ Server is running on port ${(8080, "0.0.0.0")}`)
);
